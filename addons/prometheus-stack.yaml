apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: prometheus
spec:
  generators:
    - git:
        repoURL: https://github.com/tldms0327/argocd-dev.git
        revision: HEAD
        files:
          - path: "env/demo.yaml"

  template:
    metadata:
      name: "prometheus"
      labels:
        app.kubernetes.io/instance: "addons"
    spec:
      project: addons
      destination:
        name: in-cluster
        namespace: addon-prometheus
      source:
        repoURL: https://prometheus-community.github.io/helm-charts
        targetRevision: "19.3.0" # 19.3.0
        chart: kube-prometheus-stack
        helm:
          values: |
            fullnameOverride: prometheus
            prometheus:
              prometheusSpec:
                storageSpec:
                  volumeClaimTemplate:
                    spec:
                      resources:
                        requests:
                          storage: 5Gi     # Size of volume used by prometheus'. Can be modified depending on  required retention
            ingress:
              enabled: true
              annotations:
                kubernetes.io/ingress.class: "alb"
                alb.ingress.kubernetes.io/certificate-arn: "{{acm_arn}}"
                alb.ingress.kubernetes.io/ip-address-type: "dualstack"
                alb.ingress.kubernetes.io/scheme: "internet-facing"
                alb.ingress.kubernetes.io/target-type: "ip"
              hosts: prom.kkarin.com
              paths: 
                - /*

            # grafana:
            #   persistence:
            #     type: statefulset          # To deploy Grafana as a StatefulSet
            #     enabled: true
            #     size: 5Gi                  # Size of volume used by Grafana for storing dashboards created from the Grafana UI
            #   sidecar:                              
            #     dashboards:
            #       enabled: true                        # To enable dashboards as configMaps automatically picked up by Grafana
            #       label: grafana_dashboard             # Label the configMaps should have in order to be added
            #       folder: /tmp/dashboards
            #       searchNamespace: ALL                 # To look for dashboard configMaps in all namespaces
      syncPolicy:
        # automated:
        #   prune: true
        #   selfHeal: true
        syncOptions:
          - CreateNamespace=true