fullnameOverride: argocd

server:
  replicas: 1

  service:
    type: LoadBalancer
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
      service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "AWS_ACM_CERT"
      service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"

  extraArgs:
    - --insecure

  config:
    url: https://ARGOCD_HOSTNAME

    dex.config: |
      connectors:
      - type: github
        id: github
        name: github
        config:
          clientID: $dex.github.clientId
          clientSecret: $dex.github.clientSecret
          teamNameField: slug
          orgs:
            - name: GITHUB_ORG
  rbacConfig:
    policy.default: "role:readonly"
    policy.csv: |
      g, GITHUB_ORG:GITHUB_TEAM, role:admin
  additionalProjects:
    - name: addons
      namespace: argocd
      description: addons project
      sourceRepos:
        - "*"
      destinations:
        - namespace: "*"
          server: "*"
      clusterResourceWhitelist:
        - group: "*"
          kind: "*"

    - name: apps
      namespace: argocd
      description: apps project
      sourceRepos:
        - "*"
      destinations:
        - namespace: "*"
          server: "*"
      clusterResourceWhitelist:
        - group: "*"
          kind: "*"

repoServer:
  replicas: 1


notifications:
  # -- Enable Notifications controller
  enabled: true
  updateStrategy:
    type: Recreate

  recreate: 
  name: notifications-controller 
  argocdUrl: https://ARGOCD_HOSTNAME

  secret: 
    create: true
    items:
      slack-token: "ARGOCD_NOTI_TOKEN"

  notifiers:
    service.slack: |
      token: "ARGOCD_NOTI_TOKEN"
  subscriptions:
    # For more information: https://argocd-notifications.readthedocs.io/en/stable/subscriptions/
    - recipients:
      - slack:noti-argocd-addon
      triggers:
      - on-deployed
    - recipients:
      - slack:noti-argocd-apps
      triggers:
      - on-sync-failed
      - on-sync-running
      - on-sync-succeeded

  templates:
  
    # For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/
    template.app-deployed: |
      email:
        subject: New version of an application {{.app.metadata.name}} is up and running.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
      slack:
        attachments: |
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "<{{(call .repo.RepoURLToHTTPS .app.spec.source.repoURL) | replace ".git" "" }}/commit/{{.app.status.sync.revision}}|{{.app.status.sync.revision}}>",
              "short": true
            },
            {
              "title": "MetaData",
              "value": "{{.repo.GetCommitMetadata}}",
              "short": true
            },
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-failed: |
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{.app.status.operationState.finishedAt}} with the following error: {{.app.status.operationState.message}}
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#E96D76",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-running: |
      message: |
        The sync operation of application {{.app.metadata.name}} has started at {{.app.status.operationState.startedAt}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#0DADEA",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
             {
              "title": "Operator",
              {{ if .app.status.operationState.operation.initiatedBy.username }}
              "value": {{toJson .app.status.operationState.operation.initiatedBy.username}},
              {{ else }}
              "value": "auto-sync",
              {{ end }}
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {{$commitMetadata := call .repo.GetCommitMetadata .app.status.sync.revision}}
             {
              "title": "Revision Time",
              "value": "{{$commitMetadata.Date}}(<{{(call .repo.RepoURLToHTTPS .app.spec.source.repoURL) | replace ".git" "" }}/commit/{{.app.status.sync.revision}}|URL>) ",
              "short": true
            },
            {
              "title": "Revision Information",
              "value": "{{$commitMetadata.Author}} [{{$commitMetadata.Message}}]",
              "short": false
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.app-sync-succeeded: |
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} [*{{.app.metadata.name}}*] 가 성공적으로 동기화되었습니다.
        <{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true|상세정보> ({{.app.status.operationState.startedAt}} ~ {{.app.status.operationState.finishedAt}})
      slack:
        attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Operator",
              {{ if .app.status.operationState.operation.initiatedBy.username }}
              "value": {{toJson .app.status.operationState.operation.initiatedBy.username}},
              {{ else }}
              "value": "auto-sync",
              {{ end }}
              "short": true
            },
            {
              "title": "Repository",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {{$commitMetadata := call .repo.GetCommitMetadata .app.status.sync.revision}}
             {
              "title": "Revision Time",
              "value": "{{$commitMetadata.Date}}(<{{(call .repo.RepoURLToHTTPS .app.spec.source.repoURL) | replace ".git" "" }}/commit/{{.app.status.sync.revision}}|URL>) ",
              "short": true
            },
            {
              "title": "Revision Information",
              "value": "{{$commitMetadata.Author}} [{{$commitMetadata.Message}}]",
              "short": false
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]

  triggers:
    # For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/
    trigger.on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.sync.revision
        send:
        - app-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    trigger.on-health-degraded: |
      - description: Application has degraded
        send:
        - app-health-degraded
        when: app.status.health.status == 'Degraded'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        send:
        - app-sync-failed
        when: app.status.operationState.phase in ['Error', 'Failed']
    trigger.on-sync-running: |
      - description: Application is being synced
        send:
        - app-sync-running
        when: app.status.operationState.phase in ['Running']
    trigger.on-sync-status-unknown: |
      - description: Application status is 'Unknown'
        send:
        - app-sync-status-unknown
        when: app.status.sync.status == 'Unknown'
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - app-sync-succeeded
        when: app.status.operationState.phase in ['Succeeded']

configs:
  secret:
    createSecret: true

    githubSecret: "ARGOCD_GITHUB_SECRET"

    extra:
      server.secretkey: "ARGOCD_GITHUB_SECRET"

      dex.github.clientId: "ARGOCD_GITHUB_ID"
      dex.github.clientSecret: "ARGOCD_GITHUB_SECRET"

    # Argo expects the password in the secret to be bcrypt hashed. You can create this hash with
    # `htpasswd -nbBC 10 "" $PASSWORD | tr -d ':\n' | sed 's/$2y/$2a/'`
    argocdServerAdminPassword: "ARGOCD_PASSWORD"
    # Password modification time defaults to current time if not set
    argocdServerAdminPasswordMtime: "ARGOCD_MTIME"

  repositories:
    - name: argocd-dev
      type: git
      url: https://github.com/tldms0327/argocd-dev

applicationSet:
  enabled: true